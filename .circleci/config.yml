version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@2.0.3 
  aws-eks: circleci/aws-eks@0.2.3

jobs:
  build-frontend:
    docker:
        - image: circleci/node:16.13.0
    
    # The current directory will be the place where all the steps will run
    working_directory: ~/project

    steps:
        # Checkout the code from the git branch into the working_directory
        - checkout
        # Log the current branch for debugging purposes
        - run:
            name: Show current branch
            command: echo ${CIRCLE_BRANCH}
        # Restore local dependencies (node_modules) from the CircleCI cache if it exists
        - restore_cache:
            keys:
            - v1-dependencies-{{ checksum "package.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
        # Install project dependencies
        - run:
            name: Install local dependencies
            command: npm install
        # Cache local dependencies in CircleCI storage if they don't exist
        - save_cache:
            key: v1-dependencies-{{ checksum "package.json" }}
            paths:
                - node_modules
        # Install project dependencies
        - run:
            name: Install local dependencies
            command: 
              npm update
              ng update
              ng update--all--force
        - run:
            name: Build app
            command: |
                sudo npm i
                npm run build

  # Lint the frontend source code
  lint-frontend:
      docker:
        - image: circleci/node:16.13.0
      steps:
        - checkout
        - restore_cache:
            key: frontend-build
        - run:
            name: Lint frontend
            command:
              npm ci
              npm run lint

  lint-docker:
      docker: 
        - image: python:3.7.3-stretch
      steps:
        - checkout
        - restore_cache:
            key: frontend-build
        - run:
            name: Lint docker
            command: |
              python3 -m venv venv
              . venv/bin/activate
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64 &&\
              chmod +x /bin/hadolint
        - run:
            name: run lint
            command: |
              . venv/bin/activate
              hadolint ./Dockerfile

  test-frontend:
    docker:
      - image: circleci/node:16.13.0
    steps:
      - checkout
      - restore_cache:
          key: frontend-build
      - run:
          name: Run E2E tests
          command: 
            sudo npm install -g karma-cli
            npm run test --code-coverage
      # Build project with different configuration based on the current branch
      - run:
          name: Build target branch 
          command: |
            if [ "${CIRCLE_BRANCH}" == "staging" ]; then
              npm run build-qa
            elif [ "${CIRCLE_BRANCH}" == "main" ]; then
                npm run build-prod
            else
                npm run build-dev
            fi
      # Cache the dist folder for the deploy job
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - dist
  
  build-container: # https://dzone.com/articles/how-to-dockerize-angular-app
    machine: true
    steps:
      - checkout
      - run:
          name: Build docker container
          command: |
            docker login --username ${DOCKER_LOGIN} --password ${Docker_PWD}
            docker build -t cicloud-app:latest . 
            docker images ls
            docker tag cicloud-app ${DOCKER_LOGIN}/cicloud-app:latest
            docker push ${DOCKER_LOGIN}/cicloud-app:latest

  # Now, we deploy our angular app
  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum -y install tar 
            yum -y install gzip
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
      - attach_workspace:
          at: ./
      - run:
          name: Deploy frontend objects
          command: |
            cd dist/DemoApp
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://cicloud-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # - destroy-environment:
      #     workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  # deploy-app:
  #     docker:
  #       - image: circleci/node:16.13.0
  #     working_directory: ~/project
  #     steps:
  #       - checkout
  #       - restore_cache:
  #           key: frontend-build
  #       - run:
  #           name: Install AWS CLI dependencies
  #           command: |
  #             sudo apt-get update && sudo apt-get install -yy less
  #             sudo apt-get install unzip -y
  #             curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
  #             unzip awscliv2.zip
  #             sudo ./aws/install
  #       - run:
  #           name: Deploy Docker Container Image to Amazon ECR
  #           command: |
  #             echo "Begin deploy docker container image:"

  #             echo "Step 1: Authenticating Docker client to AWS ECR registry..."
  #             aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 471776097205.dkr.ecr.eu-west-2.amazonaws.com

  #             echo "Step 2: Building the container locally..."
  #             docker build -t cicloud-app .

  #             echo "Step 3: Tagging the image so that it can be pushed to the repository..."
  #             docker tag cicloud-app:latest 471776097205.dkr.ecr.eu-west-2.amazonaws.com/cicloud-app:latest

  #             echo "Step 4: Pushing the image the newly created Amazon repository..."              
  #             docker push 471776097205.dkr.ecr.eu-west-2.amazonaws.com/cicloud-app:latest

  #             aws ecs update-service \
  #               --cluster cicloud-app-cluster \
  #               --service angular-svc \
  #               --force-new-deployment \
  #               --no-cli-pager

  #             echo "End upload docker image!"
workflows:
    default:
      jobs:
        - build-frontend
        - lint-frontend:
            requires: [build-frontend]
        - lint-docker:
            requires: [lint-frontend, build-frontend]
        - test-frontend:
            requires: [lint-frontend]
        - build-container:
            requires: [test-frontend, lint-frontend, lint-docker]
            filters:
              branches:
                only: [main]
        # - deploy-app:
        #     requires: [build-container]
          # The deploy job will only run on the filtered branches and
          # require the build job to be successful before it starts
            # filters:
            #   branches:
            #     only:
            #       - develop
            #       - staging
            #       - main
            #       - master